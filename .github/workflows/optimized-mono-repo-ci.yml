name: Optimized Mono-Repo CI Pipeline

on:
  push:
    branches-ignore:
      - main
  pull_request:
  push:
    branches:
      - main

jobs:
  identify-service:
    name: Identify Changed Service
    runs-on: ubuntu-latest
    outputs:
      service: ${{ steps.changed_service.outputs.service }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Identify Changed Service
        id: changed_service
        run: |
          echo "service=$(git diff --name-only HEAD~1 | grep 'packages/service-' | cut -d '/' -f 2 | uniq)" >> $GITHUB_OUTPUT

  build:
    name: Build Service
    runs-on: ubuntu-latest
    needs: identify-service
    if: ${{ needs.identify-service.outputs.service != '' }}
    strategy:
      matrix:
        service: [${{ needs.identify-service.outputs.service }}]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Build
        run: npm run build
        working-directory: ./packages/${{ matrix.service }}

  lint:
    name: Lint Service
    runs-on: ubuntu-latest
    needs: identify-service
    if: ${{ needs.identify-service.outputs.service != '' }}
    strategy:
      matrix:
        service: [${{ needs.identify-service.outputs.service }}]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Lint
        run: npm run lint
        working-directory: ./packages/${{ matrix.service }}

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: build
    if: ${{ needs.identify-service.outputs.service != '' }}
    strategy:
      matrix:
        service: [${{ needs.identify-service.outputs.service }}]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Run Unit Tests
        run: npm run test
        working-directory: ./packages/${{ matrix.service }}

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    if: >
      github.event_name == 'pull_request' || 
      github.ref_name == 'main'
    strategy:
      matrix:
        service: [${{ needs.identify-service.outputs.service }}]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Run Integration Tests
        run: npm run test:int
        working-directory: ./packages/${{ matrix.service }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'pull_request' || 
      github.ref_name == 'main'
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3